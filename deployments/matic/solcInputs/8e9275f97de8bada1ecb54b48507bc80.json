{
  "language": "Solidity",
  "sources": {
    "contracts/Auth.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.8.0;\n\nabstract contract Auth {\n\n    event SetOwner(address indexed owner);\n    event SetTrusted(address indexed user, bool isTrusted);\n\n    address public owner;\n\n    mapping(address => bool) isTrusted;\n\n    error OnlyOwner();\n    error OnlyTrusted();\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert OnlyOwner();\n        _;\n    }\n\n    modifier onlyTrusted() {\n        if (!isTrusted[msg.sender]) revert OnlyTrusted();\n        _;\n    }\n\n    constructor(address _owner, address _trusted) {\n        owner = _owner;\n        isTrusted[_trusted] = true;\n\n        emit SetOwner(owner);\n        emit SetTrusted(_trusted, true);\n    }\n\n    function setOwner(address _owner) external onlyOwner {\n        owner = _owner;\n        emit SetOwner(owner);\n    }\n\n    function setTrusted(address _user, bool _isTrusted) external onlyOwner {\n        isTrusted[_user] = _isTrusted;\n        emit SetTrusted(_user, _isTrusted);\n    }\n\n}\n"
    },
    "contracts/Unwindooor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.8.0;\n\nimport \"./Auth.sol\";\nimport \"./interfaces/IUniV2.sol\";\n\n/// @notice Contract for withdrawing LP positions.\n/// @dev Calling unwindPairs() withdraws the LP position into one of the two tokens\ncontract Unwindooor is Auth {\n\n    error SlippageProtection();\n    error TransferFailed();\n\n    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n    constructor(address _owner, address _user) Auth(_owner, _user) {}\n\n    function unwindPairs(\n        IUniV2[] calldata lpTokens,\n        uint256[] calldata amounts,\n        uint256[] calldata minimumOuts,\n        bool[] calldata keepToken0\n    ) external onlyTrusted {\n        for (uint256 i = 0; i < lpTokens.length; i++) {\n            if (_unwindPair(lpTokens[i], amounts[i], keepToken0[i]) < minimumOuts[i]) revert SlippageProtection();\n        }\n    }\n\n    function _unwindPair(\n        IUniV2 pair,\n        uint256 amount,\n        bool keepToken0\n    ) private returns (uint256 amountOut) {\n\n        pair.transfer(address(pair), amount);\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\n\n        if (keepToken0) {\n            _safeTransfer(pair.token1(), address(pair), amount1);\n            amountOut = _getAmountOut(amount1, uint256(reserve1), uint256(reserve0));\n            pair.swap(amountOut, 0, address(this), \"\");\n            amountOut += amount0;\n        } else {\n            _safeTransfer(pair.token0(), address(pair), amount0);\n            amountOut = _getAmountOut(amount0, uint256(reserve0), uint256(reserve1));\n            pair.swap(0, amountOut, address(this), \"\");\n            amountOut += amount1;\n        }\n    }\n\n    function _getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256) {\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\n        return numerator / denominator;\n    }\n\n    function _safeTransfer(address token, address to, uint value) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, to, value));\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) revert TransferFailed();\n    }\n\n/* \n    // helper functions\n    \n    function easySlippageCalc(\n        IUniV2[] memory lpTokens,\n        uint256 slippage,\n        address[] memory preferTokens\n    ) external view returns (uint256[] memory amounts, uint256[] memory minimumOuts, bool[] memory keepToken0) {\n        for (uint256 i = 0; i < lpTokens.length; i++) {\n\n            IUniV2 pool = lpTokens[i];\n            \n            uint256 amount = pool.balanceOf(address(this));\n            \n            if (_included(preferTokens, pool.token0())) keepToken0[i] = true;\n            \n            amounts[i] = amount;\n            \n            minimumOuts[i] = _easySlippage(pool, amount, keepToken0[i]) * slippage / 1e3;\n        }\n    }\n\n    function _easySlippage(\n        IUniV2 pool,\n        uint256 amount,\n        bool keepToken0\n    ) private view returns (uint256 minimumOut) {\n\n        uint256 totalSupply = pool.totalSupply();\n        (uint112 reserve0, uint112 reserve1,) = pool.getReserves();\n        uint256 amount0 = reserve0 * amount / totalSupply;\n        uint256 amount1 = reserve1 * amount / totalSupply;\n\n        reserve0 -= uint112(amount0);\n        reserve1 -= uint112(amount1);\n\n        if (keepToken0) {\n            minimumOut = amount0 + _getAmountOut(amount1, uint256(reserve1), uint256(reserve0));\n        } else {\n            minimumOut = amount1 + _getAmountOut(amount0, uint256(reserve0), uint256(reserve1));\n        }\n    }\n\n    function _included(address[] memory tokens, address token) internal pure returns (bool) {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (tokens[i] == token) return true;\n        }\n        return false;\n    }\n */\n}\n"
    },
    "contracts/interfaces/IUniV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\nimport \"./IERC20.sol\";\n\ninterface IUniV2 is IERC20 {\n    function totalSupply() external view returns (uint256);\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\ninterface IERC20 {\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function balanceOf(address addy) external view returns (uint256);\n}"
    },
    "contracts/WethMaker.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.8.0;\n\nimport \"./Unwindooor.sol\";\nimport \"./interfaces/IUniV2Factory.sol\";\n\n/// @notice Contract for selling received tokens into weth. Deploy on secondary networks.\ncontract WethMaker is Unwindooor {\n\n    event SetBridge(address indexed token, address bridge);\n\n    address public immutable weth;\n    IUniV2Factory public immutable factory;\n\n    mapping(address => address) public bridges;\n\n    constructor(address _owner, address _user, address _factory, address _weth) Unwindooor(_owner, _user) {\n        factory = IUniV2Factory(_factory);\n        weth = _weth;\n    }\n\n    function setAllowedBridge(address _token, address _bridge) external onlyOwner {\n        bridges[_token] = _bridge;\n        emit SetBridge(_token, _bridge);\n    }\n\n    /// @dev we buy Weth or a bridge token (which will be sold for eth on the next call).\n    function buyWeth(\n        address[] calldata tokens,\n        uint256[] calldata amountsIn,\n        uint256[] calldata minimumOuts\n    ) external onlyTrusted {\n        for (uint256 i = 0; i < tokens.length; i++) {\n\n            address tokenIn = tokens[i];\n            address outToken = bridges[tokenIn] == address(0) ? weth : bridges[tokenIn];\n            if (_swap(tokenIn, outToken, amountsIn[i], address(this)) < minimumOuts[i]) revert SlippageProtection();\n            \n        }\n    }\n\n    function _swap(\n        address tokenIn,\n        address tokenOut,\n        uint256 amountIn,\n        address to\n    ) internal returns (uint256 outAmount) {\n        \n        IUniV2 pair = IUniV2(factory.getPair(tokenIn, tokenOut));\n        IERC20(tokenIn).transfer(address(pair), amountIn);\n\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n\n        if (tokenIn < tokenOut) {\n\n            outAmount = _getAmountOut(amountIn, reserve0, reserve1);\n            pair.swap(0, outAmount, to, \"\");\n\n        } else {\n\n            outAmount = _getAmountOut(amountIn, reserve1, reserve0);\n            pair.swap(outAmount, 0, to, \"\");\n\n        }\n\n    }\n\n    // Alow owner to withdraw the funds and bridge them to mainnet.\n    function doAction(address _to, uint256 _value, bytes memory _data) onlyOwner virtual external {\n        (bool success, ) = _to.call{value: _value}(_data);\n        require(success);\n    }\n\n}\n"
    },
    "contracts/interfaces/IUniV2Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\ninterface IUniV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address);\n}"
    },
    "contracts/SushiMaker.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.8.0;\n\nimport \"./WethMaker.sol\";\n\n/// @notice Contract for selling weth to sushi. Deploy on mainnet.\ncontract SushiMaker is WethMaker {\n\n    event Serve(address indexed from, uint256 amount);\n\n    address public immutable sushi;\n    address public immutable xSushi;\n\n    constructor(\n        address _owner,\n        address _user,\n        address _factory,\n        address _weth,\n        address _sushi,\n        address _xSushi\n    ) WethMaker(_owner, _user, _factory, _weth) {\n        sushi = _sushi;\n        xSushi = _xSushi;\n    }\n\n    function buySushi(uint256 amountIn, uint256 minOutAmount) external onlyTrusted returns (uint256 amountOut) {\n        amountOut = _swap(weth, sushi, amountIn, xSushi);\n        if (amountOut < minOutAmount) revert SlippageProtection();\n        emit Serve(msg.sender, amountOut);\n    }\n\n    function sweep(uint256 amount) external onlyTrusted {\n        IERC20(sushi).transfer(xSushi, amount);\n        emit Serve(msg.sender, amount);\n    }\n\n    // Don't allow arbitrary execution on mainnet.\n    function doAction(address, uint256, bytes memory) external override {\n        revert();\n    }\n\n    // In case we receive any unwrapped ethereum we can call this.\n    function wrapEth() external {\n        weth.call{value: address(this).balance}(\"\");\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}