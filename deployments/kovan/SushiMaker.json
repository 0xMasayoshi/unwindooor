{
  "address": "0x2cD1465D1561556Bd9bd276b29Ed62b20AAd973e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushi",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xSushi",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyTrusted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageProtection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Serve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "SetBridge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "SetOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isTrusted",
          "type": "bool"
        }
      ],
      "name": "SetTrusted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bridges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniV2[]",
          "name": "lpTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minimumOut0",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minimumOut1",
          "type": "uint256[]"
        }
      ],
      "name": "burnPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minOutAmount",
          "type": "uint256"
        }
      ],
      "name": "buySushi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minimumOuts",
          "type": "uint256[]"
        }
      ],
      "name": "buyWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "doAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isTrusted",
          "type": "bool"
        }
      ],
      "name": "setTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "trusted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensA",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokensB",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minimumOuts",
          "type": "uint256[]"
        }
      ],
      "name": "unwindPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xSushi",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x37d70c090e11b316cb1895fc87a10010c22c757db3050aa377fcd669f117a296",
  "receipt": {
    "to": null,
    "from": "0x58B4B6951e9174F153635574076241315D7d3503",
    "contractAddress": "0x2cD1465D1561556Bd9bd276b29Ed62b20AAd973e",
    "transactionIndex": 1,
    "gasUsed": "1863590",
    "logsBloom": "0x
    "blockHash": "0x5a8120a320b1b97a4601a999406cc488e52535afbcb4c69450c5c048079b20eb",
    "transactionHash": "0x37d70c090e11b316cb1895fc87a10010c22c757db3050aa377fcd669f117a296",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 28894986,
        "transactionHash": "0x37d70c090e11b316cb1895fc87a10010c22c757db3050aa377fcd669f117a296",
        "address": "0x2cD1465D1561556Bd9bd276b29Ed62b20AAd973e",
        "topics": [
          "0x167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb5",
          "0x0000000000000000000000003027a0c4e35272c0707de2651a0638c3df1c37ac"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5a8120a320b1b97a4601a999406cc488e52535afbcb4c69450c5c048079b20eb"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 28894986,
        "transactionHash": "0x37d70c090e11b316cb1895fc87a10010c22c757db3050aa377fcd669f117a296",
        "address": "0x2cD1465D1561556Bd9bd276b29Ed62b20AAd973e",
        "topics": [
          "0x878d105ed19c01e992a54459c2f04ba19432ac45600b42ce340d034272207436",
          "0x00000000000000000000000010025a49f69ba9445e9b81d0003b235ee629115f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0x5a8120a320b1b97a4601a999406cc488e52535afbcb4c69450c5c048079b20eb"
      }
    ],
    "blockNumber": 28894986,
    "cumulativeGasUsed": "1884590",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3027a0c4E35272c0707dE2651A0638c3dF1c37AC",
    "0x10025a49F69Ba9445e9b81d0003b235EE629115F",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0xd0A1E359811322d97991E03f863a0C30C2cF029C",
    "0x0769fd68dFb93167989C6f7254cd0D766Fb2841F",
    "0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c"
  ],
  "solcInputHash": "6b4b1f33426ab20402b3c7cc6a52d773",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xSushi\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTrusted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageProtection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Serve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"SetBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"name\":\"SetTrusted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bridges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniV2[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minimumOut0\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minimumOut1\",\"type\":\"uint256[]\"}],\"name\":\"burnPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutAmount\",\"type\":\"uint256\"}],\"name\":\"buySushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minimumOuts\",\"type\":\"uint256[]\"}],\"name\":\"buyWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"doAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"name\":\"setTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trusted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensA\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokensB\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minimumOuts\",\"type\":\"uint256[]\"}],\"name\":\"unwindPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xSushi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract for selling weth to sushi. Deploy on mainnet.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SushiMaker.sol\":\"SushiMaker\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nabstract contract Auth {\\n\\n    event SetOwner(address indexed owner);\\n    event SetTrusted(address indexed user, bool isTrusted);\\n\\n    address public owner;\\n\\n    mapping(address => bool) public trusted;\\n\\n    error OnlyOwner();\\n    error OnlyTrusted();\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert OnlyOwner();\\n        _;\\n    }\\n\\n    modifier onlyTrusted() {\\n        if (!trusted[msg.sender]) revert OnlyTrusted();\\n        _;\\n    }\\n\\n    constructor(address newOwner, address trustedUser) {\\n        owner = newOwner;\\n        trusted[trustedUser] = true;\\n\\n        emit SetOwner(owner);\\n        emit SetTrusted(trustedUser, true);\\n    }\\n\\n    function setOwner(address newOwner) external onlyOwner {\\n        owner = newOwner;\\n        emit SetOwner(newOwner);\\n    }\\n\\n    function setTrusted(address user, bool isTrusted) external onlyOwner {\\n        trusted[user] = isTrusted;\\n        emit SetTrusted(user, isTrusted);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5460242794293bf1f7b4431f7cf8fc83bde329288393330f5563ead8ce9d3607\",\"license\":\"GPL-3.0-or-later\"},\"contracts/SushiMaker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./WethMaker.sol\\\";\\n\\n/// @notice Contract for selling weth to sushi. Deploy on mainnet.\\ncontract SushiMaker is WethMaker {\\n\\n    event Serve(uint256 amount);\\n\\n    address public immutable sushi;\\n    address public immutable xSushi;\\n\\n    constructor(\\n        address owner,\\n        address user,\\n        address factory,\\n        address weth,\\n        address _sushi,\\n        address _xSushi\\n    ) WethMaker(owner, user, factory, weth) {\\n        sushi = _sushi;\\n        xSushi = _xSushi;\\n    }\\n\\n    function buySushi(uint256 amountIn, uint256 minOutAmount) external onlyTrusted returns (uint256 amountOut) {\\n        amountOut = _swap(weth, sushi, amountIn, xSushi);\\n        if (amountOut < minOutAmount) revert SlippageProtection();\\n        emit Serve(amountOut);\\n    }\\n\\n    function sweep(uint256 amount) external onlyTrusted {\\n        IERC20(sushi).transfer(xSushi, amount);\\n        emit Serve(amount);\\n    }\\n\\n    // In case we receive any unwrapped ethereum we can call this.\\n    function wrapEth() external {\\n        weth.call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0x63d29f49971ca3fc2b31994d8de0aca66acfb357ece9a622178ba7d24978d639\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Unwindooor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Auth.sol\\\";\\nimport \\\"./interfaces/IUniV2.sol\\\";\\nimport \\\"./interfaces/IUniV2Factory.sol\\\";\\n\\n/// @notice Contract for withdrawing LP positions.\\n/// @dev Calling unwindPairs() withdraws the LP position into one of the two tokens\\ncontract Unwindooor is Auth {\\n\\n    error SlippageProtection();\\n    error TransferFailed();\\n\\n    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    IUniV2Factory public immutable factory;\\n\\n    constructor(\\n        address owner,\\n        address user,\\n        address factoryAddress\\n    ) Auth(owner, user) {\\n        factory = IUniV2Factory(factoryAddress);\\n    }\\n\\n    // We remove liquidity and sell tokensB[i] for tokensA[i].\\n    function unwindPairs(\\n        address[] calldata tokensA,\\n        address[] calldata tokensB,\\n        uint256[] calldata amounts,\\n        uint256[] calldata minimumOuts\\n    ) external onlyTrusted {\\n        for (uint256 i = 0; i < tokensA.length; i++) {\\n            \\n            address tokenA = tokensA[i];\\n            address tokenB = tokensB[i];\\n            bool keepToken0 = tokenA < tokenB;\\n            address pair = _pairFor(tokenA, tokenB);\\n\\n            if (_unwindPair(IUniV2(pair), amounts[i], keepToken0, tokenB) < minimumOuts[i]) revert SlippageProtection();\\n        }\\n    }\\n\\n    // Burn liquidity and sell one of the tokens for the other.\\n    function _unwindPair(\\n        IUniV2 pair,\\n        uint256 amount,\\n        bool keepToken0,\\n        address tokenToSell\\n    ) private returns (uint256 amountOut) {\\n\\n        pair.transfer(address(pair), amount);\\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n\\n        if (keepToken0) {\\n            _safeTransfer(tokenToSell, address(pair), amount1);\\n            amountOut = _getAmountOut(amount1, uint256(reserve1), uint256(reserve0));\\n            pair.swap(amountOut, 0, address(this), \\\"\\\");\\n            amountOut += amount0;\\n        } else {\\n            _safeTransfer(tokenToSell, address(pair), amount0);\\n            amountOut = _getAmountOut(amount0, uint256(reserve0), uint256(reserve1));\\n            pair.swap(0, amountOut, address(this), \\\"\\\");\\n            amountOut += amount1;\\n        }\\n    }\\n\\n    // In case we don't want to sell one of the tokens for the other.\\n    function burnPairs(\\n        IUniV2[] calldata lpTokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata minimumOut0,\\n        uint256[] calldata minimumOut1\\n    ) external onlyTrusted {\\n        for (uint256 i = 0; i < lpTokens.length; i++) {\\n            IUniV2 pair = lpTokens[i];\\n            pair.transfer(address(pair), amounts[i]);\\n            (uint256 amount0, uint256 amount1) = pair.burn(address(this));\\n            if (amount0 < minimumOut0[i] || amount1 < minimumOut1[i]) revert SlippageProtection();\\n        }\\n    }\\n\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        return numerator / denominator;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, to, value));\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) revert TransferFailed();\\n    }\\n\\n    function _pairFor(address tokenA, address tokenB) internal view returns (address pair) {\\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\\n            hex'ff',\\n            factory,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\\n        )))));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x92f355c0d1c81fc368b4edbcb485b6921c89a0a8fd797624bd25d122a28d8b42\",\"license\":\"GPL-3.0-or-later\"},\"contracts/WethMaker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Unwindooor.sol\\\";\\n\\n/// @notice Contract for selling received tokens into weth. Deploy on secondary networks.\\ncontract WethMaker is Unwindooor {\\n\\n    event SetBridge(address indexed token, address bridge);\\n\\n    address public immutable weth;\\n\\n    mapping(address => address) public bridges;\\n\\n    constructor(\\n        address owner,\\n        address user,\\n        address factory,\\n        address _weth\\n    ) Unwindooor(owner, user, factory) {\\n        weth = _weth;\\n    }\\n\\n    function setBridge(address token, address bridge) external onlyOwner {\\n        bridges[token] = bridge;\\n        emit SetBridge(token, bridge);\\n    }\\n\\n    // Exchange token for weth or its bridge token (which gets converted into weth in subsequent transactions).\\n    function buyWeth(\\n        address[] calldata tokens,\\n        uint256[] calldata amountsIn,\\n        uint256[] calldata minimumOuts\\n    ) external onlyTrusted {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n\\n            address tokenIn = tokens[i];\\n            address outToken = bridges[tokenIn] == address(0) ? weth : bridges[tokenIn];\\n            if (_swap(tokenIn, outToken, amountsIn[i], address(this)) < minimumOuts[i]) revert SlippageProtection();\\n            \\n        }\\n    }\\n\\n    function _swap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address to\\n    ) internal returns (uint256 outAmount) {\\n\\n        IUniV2 pair = IUniV2(_pairFor(tokenIn, tokenOut));\\n        _safeTransfer(tokenIn, address(pair), amountIn);\\n\\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n\\n        if (tokenIn < tokenOut) {\\n\\n            outAmount = _getAmountOut(amountIn, reserve0, reserve1);\\n            pair.swap(0, outAmount, to, \\\"\\\");\\n\\n        } else {\\n\\n            outAmount = _getAmountOut(amountIn, reserve1, reserve0);\\n            pair.swap(outAmount, 0, to, \\\"\\\");\\n\\n        }\\n\\n    }\\n\\n    // Allow the owner to withdraw the funds and bridge them to mainnet.\\n    function withdraw(address token, address to, uint256 _value) onlyOwner external {\\n        if (token != address(0)) {\\n            _safeTransfer(token, to, _value);\\n        } else {\\n            (bool success, ) = to.call{value: _value}(\\\"\\\");\\n            require(success);\\n        }\\n    }\\n\\n    function doAction(address to, uint256 _value, bytes memory data) onlyOwner external {\\n        (bool success, ) = to.call{value: _value}(data);\\n        require(success);\\n    }\\n\\n    receive() external payable {}\\n\\n}\\n\",\"keccak256\":\"0xe788a84c0dea3de356a3b3a13331edef282658b335e1efc4189eca5296e5d34a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\ninterface IERC20 {\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function balanceOf(address addy) external view returns (uint256);\\n}\",\"keccak256\":\"0x2f287c50356328f67ae0860045e18da10557296548c083cd90e6145cdc9e2f8b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IUniV2 is IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n}\",\"keccak256\":\"0xba877faa323b59d44420f92f2a239e63f509d0eb4487f1f8c5814ae31dc5bce3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\ninterface IUniV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address);\\n}\",\"keccak256\":\"0x9391904c1c33483d2f73bedc82be95d88375dccfc695a7ec6dcd8f975a97b7de\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620022283803806200222883398101604081905262000035916200013c565b600080546001600160a01b0319166001600160a01b038881169190911782558681168252600160208190526040808420805460ff19169092179091558254905189938993899389938793879387938693869391909216917f167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb59190a2604051600181526001600160a01b038216907f878d105ed19c01e992a54459c2f04ba19432ac45600b42ce340d0342722074369060200160405180910390a250506001600160a01b0390811660805292831660a052505094851660c0525050501660e05250620001bd92505050565b80516001600160a01b03811681146200013757600080fd5b919050565b60008060008060008060c087890312156200015657600080fd5b62000161876200011f565b955062000171602088016200011f565b945062000181604088016200011f565b935062000191606088016200011f565b9250620001a1608088016200011f565b9150620001b160a088016200011f565b90509295509295509295565b60805160a05160c05160e051611ff96200022f600039600081816103e6015281816105970152610dce01526000818161014b015281816105750152610dfd0152600081816102190152818161055401528181610c930152610ebb01526000818161036f01526113600152611ff96000f3fe60806040526004361061012d5760003560e01c80639d22ae8c116100a5578063c45a015511610074578063d298460811610059578063d2984608146103d4578063d9caed1214610408578063f32a12ac1461042857600080fd5b8063c45a01551461035d578063ced67f0c1461039157600080fd5b80639d22ae8c146102e85780639dd8a81c14610308578063aa60e73314610328578063b081b4eb1461034857600080fd5b80633fc8cef3116100fc5780636e9821c2116100e15780636e9821c21461025b5780638da5cb5b1461029b5780638e9be9f4146102c857600080fd5b80633fc8cef31461020757806354a0af171461023b57600080fd5b80630a0879031461013957806313af403514610197578063225bf435146101b9578063248091c0146101e757600080fd5b3661013457005b600080fd5b34801561014557600080fd5b5061016d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156101a357600080fd5b506101b76101b23660046119d4565b610448565b005b3480156101c557600080fd5b506101d96101d43660046119f8565b610506565b60405190815260200161018e565b3480156101f357600080fd5b506101b7610202366004611a66565b610630565b34801561021357600080fd5b5061016d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024757600080fd5b506101b7610256366004611b59565b6108a9565b34801561026757600080fd5b5061028b6102763660046119d4565b60016020526000908152604090205460ff1681565b604051901515815260200161018e565b3480156102a757600080fd5b5060005461016d9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156102d457600080fd5b506101b76102e3366004611a66565b610978565b3480156102f457600080fd5b506101b7610303366004611c44565b610ad8565b34801561031457600080fd5b506101b7610323366004611c7d565b610bb6565b34801561033457600080fd5b506101b7610343366004611d17565b610d48565b34801561035457600080fd5b506101b7610ea1565b34801561036957600080fd5b5061016d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039d57600080fd5b5061016d6103ac3660046119d4565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b3480156103e057600080fd5b5061016d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561041457600080fd5b506101b7610423366004611d30565b610f1c565b34801561043457600080fd5b506101b7610443366004611d7f565b610fb6565b60005473ffffffffffffffffffffffffffffffffffffffff163314610499576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb591a250565b3360009081526001602052604081205460ff1661054f576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105bb7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000857f000000000000000000000000000000000000000000000000000000000000000061108a565b9050818110156105f7576040517f17d431f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518181527f4bd1bdc2f263261c65e1cf0d8f7908b6fbf4b4906bafb6a28e11aafdc86c326e9060200160405180910390a192915050565b3360009081526001602052604090205460ff16610679576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8781101561089e57600089898381811061069857610698611dad565b90506020020160208101906106ad91906119d4565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb828a8a868181106106de576106de611dad565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff909416600485015260200291909101356024830152506044016020604051808303816000875af1158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b9190611ddc565b506040517f89afcb44000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8416906389afcb449060240160408051808303816000875af11580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108109190611df9565b9150915087878581811061082657610826611dad565b90506020020135821080610851575085858581811061084757610847611dad565b9050602002013581105b15610888576040517f17d431f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050808061089690611e4c565b91505061067c565b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108fa576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1683836040516109229190611e85565b60006040518083038185875af1925050503d806000811461095f576040519150601f19603f3d011682016040523d82523d6000602084013e610964565b606091505b505090508061097257600080fd5b50505050565b3360009081526001602052604090205460ff166109c1576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8781101561089e5760008989838181106109e0576109e0611dad565b90506020020160208101906109f591906119d4565b90506000888884818110610a0b57610a0b611dad565b9050602002016020810190610a2091906119d4565b905073ffffffffffffffffffffffffffffffffffffffff808216908316106000610a4a84846112de565b9050868686818110610a5e57610a5e611dad565b90506020020135610a89828b8b89818110610a7b57610a7b611dad565b905060200201358587611465565b1015610ac1576040517f17d431f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050508080610ad090611e4c565b9150506109c4565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b29576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660008181526002602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055905192835290917f8357797ab855a0bad5103ea8bd2f21f986350e94d73f143ae114db8f0db5a93a91015b60405180910390a25050565b3360009081526001602052604090205460ff16610bff576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85811015610d3f576000878783818110610c1e57610c1e611dad565b9050602002016020810190610c3391906119d4565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260026020526040812054929350911615610c915773ffffffffffffffffffffffffffffffffffffffff80831660009081526002602052604090205416610cb3565b7f00000000000000000000000000000000000000000000000000000000000000005b9050848484818110610cc757610cc7611dad565b90506020020135610cf283838a8a88818110610ce557610ce5611dad565b905060200201353061108a565b1015610d2a576040517f17d431f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50508080610d3790611e4c565b915050610c02565b50505050505050565b3360009081526001602052604090205460ff16610d91576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a9190611ddc565b506040518181527f4bd1bdc2f263261c65e1cf0d8f7908b6fbf4b4906bafb6a28e11aafdc86c326e9060200160405180910390a150565b60405173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016904790600081818185875af1925050503d8060008114610f17576040519150601f19603f3d011682016040523d82523d6000602084013e505050565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f6d576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831615610f9457610f178383836117eb565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610922565b60005473ffffffffffffffffffffffffffffffffffffffff163314611007576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527f878d105ed19c01e992a54459c2f04ba19432ac45600b42ce340d0342722074369101610baa565b60008061109786866112de565b90506110a48682866117eb565b6000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111169190611ee3565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610156112235761117a868383611960565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526000600482018190526024820183905273ffffffffffffffffffffffffffffffffffffffff88811660448401526080606484015260848301919091529195509084169063022c0d9f9060a401600060405180830381600087803b15801561120657600080fd5b505af115801561121a573d6000803e3d6000fd5b505050506112d3565b61122e868284611960565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526004810182905260006024820181905273ffffffffffffffffffffffffffffffffffffffff88811660448401526080606484015260848301919091529195509084169063022c0d9f9060a401600060405180830381600087803b1580156112ba57600080fd5b505af11580156112ce573d6000803e3d6000fd5b505050505b505050949350505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061131d578385611320565b84845b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015291935091507f000000000000000000000000000000000000000000000000000000000000000090604801604051602081830303815290604052805190602001206040516020016114269291907fff00000000000000000000000000000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600183015260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012095945050505050565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482018190526024820185905260009163a9059cbb906044016020604051808303816000875af11580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff9190611ddc565b506040517f89afcb44000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8816906389afcb449060240160408051808303816000875af1158015611570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115949190611df9565b915091506000808873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156115e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160a9190611ee3565b509150915086156116fc57611620868a856117eb565b61164b83826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16611960565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526004810182905260006024820181905230604483015260806064830152608482015290955073ffffffffffffffffffffffffffffffffffffffff8a169063022c0d9f9060a401600060405180830381600087803b1580156116d157600080fd5b505af11580156116e5573d6000803e3d6000fd5b5050505083856116f59190611f33565b94506117df565b611707868a866117eb565b61173284836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16611960565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526000600482018190526024820183905230604483015260806064830152608482015290955073ffffffffffffffffffffffffffffffffffffffff8a169063022c0d9f9060a401600060405180830381600087803b1580156117b857600080fd5b505af11580156117cc573d6000803e3d6000fd5b5050505082856117dc9190611f33565b94505b50505050949350505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283928716916118b29190611e85565b6000604051808303816000865af19150503d80600081146118ef576040519150601f19603f3d011682016040523d82523d6000602084013e6118f4565b606091505b509150915081158061192257508051158015906119225750808060200190518101906119209190611ddc565b155b15611959576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b60008061196f856103e5611f4b565b9050600061197d8483611f4b565b905060008261198e876103e8611f4b565b6119989190611f33565b90506119a48183611f88565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146119d157600080fd5b50565b6000602082840312156119e657600080fd5b81356119f1816119af565b9392505050565b60008060408385031215611a0b57600080fd5b50508035926020909101359150565b60008083601f840112611a2c57600080fd5b50813567ffffffffffffffff811115611a4457600080fd5b6020830191508360208260051b8501011115611a5f57600080fd5b9250929050565b6000806000806000806000806080898b031215611a8257600080fd5b883567ffffffffffffffff80821115611a9a57600080fd5b611aa68c838d01611a1a565b909a50985060208b0135915080821115611abf57600080fd5b611acb8c838d01611a1a565b909850965060408b0135915080821115611ae457600080fd5b611af08c838d01611a1a565b909650945060608b0135915080821115611b0957600080fd5b50611b168b828c01611a1a565b999c989b5096995094979396929594505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600060608486031215611b6e57600080fd5b8335611b79816119af565b925060208401359150604084013567ffffffffffffffff80821115611b9d57600080fd5b818601915086601f830112611bb157600080fd5b813581811115611bc357611bc3611b2a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715611c0957611c09611b2a565b81604052828152896020848701011115611c2257600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060408385031215611c5757600080fd5b8235611c62816119af565b91506020830135611c72816119af565b809150509250929050565b60008060008060008060608789031215611c9657600080fd5b863567ffffffffffffffff80821115611cae57600080fd5b611cba8a838b01611a1a565b90985096506020890135915080821115611cd357600080fd5b611cdf8a838b01611a1a565b90965094506040890135915080821115611cf857600080fd5b50611d0589828a01611a1a565b979a9699509497509295939492505050565b600060208284031215611d2957600080fd5b5035919050565b600080600060608486031215611d4557600080fd5b8335611d50816119af565b92506020840135611d60816119af565b929592945050506040919091013590565b80151581146119d157600080fd5b60008060408385031215611d9257600080fd5b8235611d9d816119af565b91506020830135611c7281611d71565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611dee57600080fd5b81516119f181611d71565b60008060408385031215611e0c57600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e7e57611e7e611e1d565b5060010190565b6000825160005b81811015611ea65760208186018101518583015201611e8c565b81811115611eb5576000828501525b509190910192915050565b80516dffffffffffffffffffffffffffff81168114611ede57600080fd5b919050565b600080600060608486031215611ef857600080fd5b611f0184611ec0565b9250611f0f60208501611ec0565b9150604084015163ffffffff81168114611f2857600080fd5b809150509250925092565b60008219821115611f4657611f46611e1d565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f8357611f83611e1d565b500290565b600082611fbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212206c4c5ffc8ccb8d59bb481dc2499e6e2dc87006543cab5f49cf51e0ee679d87cf64736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061012d5760003560e01c80639d22ae8c116100a5578063c45a015511610074578063d298460811610059578063d2984608146103d4578063d9caed1214610408578063f32a12ac1461042857600080fd5b8063c45a01551461035d578063ced67f0c1461039157600080fd5b80639d22ae8c146102e85780639dd8a81c14610308578063aa60e73314610328578063b081b4eb1461034857600080fd5b80633fc8cef3116100fc5780636e9821c2116100e15780636e9821c21461025b5780638da5cb5b1461029b5780638e9be9f4146102c857600080fd5b80633fc8cef31461020757806354a0af171461023b57600080fd5b80630a0879031461013957806313af403514610197578063225bf435146101b9578063248091c0146101e757600080fd5b3661013457005b600080fd5b34801561014557600080fd5b5061016d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156101a357600080fd5b506101b76101b23660046119d4565b610448565b005b3480156101c557600080fd5b506101d96101d43660046119f8565b610506565b60405190815260200161018e565b3480156101f357600080fd5b506101b7610202366004611a66565b610630565b34801561021357600080fd5b5061016d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024757600080fd5b506101b7610256366004611b59565b6108a9565b34801561026757600080fd5b5061028b6102763660046119d4565b60016020526000908152604090205460ff1681565b604051901515815260200161018e565b3480156102a757600080fd5b5060005461016d9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156102d457600080fd5b506101b76102e3366004611a66565b610978565b3480156102f457600080fd5b506101b7610303366004611c44565b610ad8565b34801561031457600080fd5b506101b7610323366004611c7d565b610bb6565b34801561033457600080fd5b506101b7610343366004611d17565b610d48565b34801561035457600080fd5b506101b7610ea1565b34801561036957600080fd5b5061016d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039d57600080fd5b5061016d6103ac3660046119d4565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b3480156103e057600080fd5b5061016d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561041457600080fd5b506101b7610423366004611d30565b610f1c565b34801561043457600080fd5b506101b7610443366004611d7f565b610fb6565b60005473ffffffffffffffffffffffffffffffffffffffff163314610499576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb591a250565b3360009081526001602052604081205460ff1661054f576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105bb7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000857f000000000000000000000000000000000000000000000000000000000000000061108a565b9050818110156105f7576040517f17d431f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518181527f4bd1bdc2f263261c65e1cf0d8f7908b6fbf4b4906bafb6a28e11aafdc86c326e9060200160405180910390a192915050565b3360009081526001602052604090205460ff16610679576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8781101561089e57600089898381811061069857610698611dad565b90506020020160208101906106ad91906119d4565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb828a8a868181106106de576106de611dad565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff909416600485015260200291909101356024830152506044016020604051808303816000875af1158015610757573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b9190611ddc565b506040517f89afcb44000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8416906389afcb449060240160408051808303816000875af11580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108109190611df9565b9150915087878581811061082657610826611dad565b90506020020135821080610851575085858581811061084757610847611dad565b9050602002013581105b15610888576040517f17d431f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050808061089690611e4c565b91505061067c565b505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108fa576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1683836040516109229190611e85565b60006040518083038185875af1925050503d806000811461095f576040519150601f19603f3d011682016040523d82523d6000602084013e610964565b606091505b505090508061097257600080fd5b50505050565b3360009081526001602052604090205460ff166109c1576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8781101561089e5760008989838181106109e0576109e0611dad565b90506020020160208101906109f591906119d4565b90506000888884818110610a0b57610a0b611dad565b9050602002016020810190610a2091906119d4565b905073ffffffffffffffffffffffffffffffffffffffff808216908316106000610a4a84846112de565b9050868686818110610a5e57610a5e611dad565b90506020020135610a89828b8b89818110610a7b57610a7b611dad565b905060200201358587611465565b1015610ac1576040517f17d431f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050508080610ad090611e4c565b9150506109c4565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b29576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660008181526002602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055905192835290917f8357797ab855a0bad5103ea8bd2f21f986350e94d73f143ae114db8f0db5a93a91015b60405180910390a25050565b3360009081526001602052604090205460ff16610bff576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85811015610d3f576000878783818110610c1e57610c1e611dad565b9050602002016020810190610c3391906119d4565b73ffffffffffffffffffffffffffffffffffffffff808216600090815260026020526040812054929350911615610c915773ffffffffffffffffffffffffffffffffffffffff80831660009081526002602052604090205416610cb3565b7f00000000000000000000000000000000000000000000000000000000000000005b9050848484818110610cc757610cc7611dad565b90506020020135610cf283838a8a88818110610ce557610ce5611dad565b905060200201353061108a565b1015610d2a576040517f17d431f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50508080610d3790611e4c565b915050610c02565b50505050505050565b3360009081526001602052604090205460ff16610d91576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a9190611ddc565b506040518181527f4bd1bdc2f263261c65e1cf0d8f7908b6fbf4b4906bafb6a28e11aafdc86c326e9060200160405180910390a150565b60405173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016904790600081818185875af1925050503d8060008114610f17576040519150601f19603f3d011682016040523d82523d6000602084013e505050565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f6d576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831615610f9457610f178383836117eb565b60008273ffffffffffffffffffffffffffffffffffffffff1682604051610922565b60005473ffffffffffffffffffffffffffffffffffffffff163314611007576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527f878d105ed19c01e992a54459c2f04ba19432ac45600b42ce340d0342722074369101610baa565b60008061109786866112de565b90506110a48682866117eb565b6000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111169190611ee3565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610156112235761117a868383611960565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526000600482018190526024820183905273ffffffffffffffffffffffffffffffffffffffff88811660448401526080606484015260848301919091529195509084169063022c0d9f9060a401600060405180830381600087803b15801561120657600080fd5b505af115801561121a573d6000803e3d6000fd5b505050506112d3565b61122e868284611960565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526004810182905260006024820181905273ffffffffffffffffffffffffffffffffffffffff88811660448401526080606484015260848301919091529195509084169063022c0d9f9060a401600060405180830381600087803b1580156112ba57600080fd5b505af11580156112ce573d6000803e3d6000fd5b505050505b505050949350505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061131d578385611320565b84845b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084811b8216602084015283901b16603482015291935091507f000000000000000000000000000000000000000000000000000000000000000090604801604051602081830303815290604052805190602001206040516020016114269291907fff00000000000000000000000000000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600183015260158201527fe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012095945050505050565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482018190526024820185905260009163a9059cbb906044016020604051808303816000875af11580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff9190611ddc565b506040517f89afcb44000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8816906389afcb449060240160408051808303816000875af1158015611570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115949190611df9565b915091506000808873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156115e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160a9190611ee3565b509150915086156116fc57611620868a856117eb565b61164b83826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16611960565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526004810182905260006024820181905230604483015260806064830152608482015290955073ffffffffffffffffffffffffffffffffffffffff8a169063022c0d9f9060a401600060405180830381600087803b1580156116d157600080fd5b505af11580156116e5573d6000803e3d6000fd5b5050505083856116f59190611f33565b94506117df565b611707868a866117eb565b61173284836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16611960565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526000600482018190526024820183905230604483015260806064830152608482015290955073ffffffffffffffffffffffffffffffffffffffff8a169063022c0d9f9060a401600060405180830381600087803b1580156117b857600080fd5b505af11580156117cc573d6000803e3d6000fd5b5050505082856117dc9190611f33565b94505b50505050949350505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283928716916118b29190611e85565b6000604051808303816000865af19150503d80600081146118ef576040519150601f19603f3d011682016040523d82523d6000602084013e6118f4565b606091505b509150915081158061192257508051158015906119225750808060200190518101906119209190611ddc565b155b15611959576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b60008061196f856103e5611f4b565b9050600061197d8483611f4b565b905060008261198e876103e8611f4b565b6119989190611f33565b90506119a48183611f88565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146119d157600080fd5b50565b6000602082840312156119e657600080fd5b81356119f1816119af565b9392505050565b60008060408385031215611a0b57600080fd5b50508035926020909101359150565b60008083601f840112611a2c57600080fd5b50813567ffffffffffffffff811115611a4457600080fd5b6020830191508360208260051b8501011115611a5f57600080fd5b9250929050565b6000806000806000806000806080898b031215611a8257600080fd5b883567ffffffffffffffff80821115611a9a57600080fd5b611aa68c838d01611a1a565b909a50985060208b0135915080821115611abf57600080fd5b611acb8c838d01611a1a565b909850965060408b0135915080821115611ae457600080fd5b611af08c838d01611a1a565b909650945060608b0135915080821115611b0957600080fd5b50611b168b828c01611a1a565b999c989b5096995094979396929594505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600060608486031215611b6e57600080fd5b8335611b79816119af565b925060208401359150604084013567ffffffffffffffff80821115611b9d57600080fd5b818601915086601f830112611bb157600080fd5b813581811115611bc357611bc3611b2a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715611c0957611c09611b2a565b81604052828152896020848701011115611c2257600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060408385031215611c5757600080fd5b8235611c62816119af565b91506020830135611c72816119af565b809150509250929050565b60008060008060008060608789031215611c9657600080fd5b863567ffffffffffffffff80821115611cae57600080fd5b611cba8a838b01611a1a565b90985096506020890135915080821115611cd357600080fd5b611cdf8a838b01611a1a565b90965094506040890135915080821115611cf857600080fd5b50611d0589828a01611a1a565b979a9699509497509295939492505050565b600060208284031215611d2957600080fd5b5035919050565b600080600060608486031215611d4557600080fd5b8335611d50816119af565b92506020840135611d60816119af565b929592945050506040919091013590565b80151581146119d157600080fd5b60008060408385031215611d9257600080fd5b8235611d9d816119af565b91506020830135611c7281611d71565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611dee57600080fd5b81516119f181611d71565b60008060408385031215611e0c57600080fd5b505080516020909101519092909150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611e7e57611e7e611e1d565b5060010190565b6000825160005b81811015611ea65760208186018101518583015201611e8c565b81811115611eb5576000828501525b509190910192915050565b80516dffffffffffffffffffffffffffff81168114611ede57600080fd5b919050565b600080600060608486031215611ef857600080fd5b611f0184611ec0565b9250611f0f60208501611ec0565b9150604084015163ffffffff81168114611f2857600080fd5b809150509250925092565b60008219821115611f4657611f46611e1d565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f8357611f83611e1d565b500290565b600082611fbe577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212206c4c5ffc8ccb8d59bb481dc2499e6e2dc87006543cab5f49cf51e0ee679d87cf64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contract for selling weth to sushi. Deploy on mainnet.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13,
        "contract": "contracts/SushiMaker.sol:SushiMaker",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17,
        "contract": "contracts/SushiMaker.sol:SushiMaker",
        "label": "trusted",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 701,
        "contract": "contracts/SushiMaker.sol:SushiMaker",
        "label": "bridges",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}