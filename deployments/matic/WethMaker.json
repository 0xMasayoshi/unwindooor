{
  "address": "0xBDF2E24bCCaDDb4Eb4893E164c935BfA561e7cd9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlyOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyTrusted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageProtection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "SetBridge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "SetOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isTrusted",
          "type": "bool"
        }
      ],
      "name": "SetTrusted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bridges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minimumOuts",
          "type": "uint256[]"
        }
      ],
      "name": "buyWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "doAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IUniV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bridge",
          "type": "address"
        }
      ],
      "name": "setAllowedBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isTrusted",
          "type": "bool"
        }
      ],
      "name": "setTrusted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniV2[]",
          "name": "lpTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minimumOuts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "keepToken0",
          "type": "bool[]"
        }
      ],
      "name": "unwindPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9bc901725d374ba6352368c43a3a6de00cd85c80502bc8d9f7e9c9d9c3540a98",
  "receipt": {
    "to": null,
    "from": "0x58B4B6951e9174F153635574076241315D7d3503",
    "contractAddress": "0xBDF2E24bCCaDDb4Eb4893E164c935BfA561e7cd9",
    "transactionIndex": 39,
    "gasUsed": "1413413",
    "logsBloom": "0x
    "blockHash": "0x951eb1a2e24db8c79094fe0709d2e79661e98ad44ca0571ddd904ebbd889fe08",
    "transactionHash": "0x9bc901725d374ba6352368c43a3a6de00cd85c80502bc8d9f7e9c9d9c3540a98",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 22323444,
        "transactionHash": "0x9bc901725d374ba6352368c43a3a6de00cd85c80502bc8d9f7e9c9d9c3540a98",
        "address": "0xBDF2E24bCCaDDb4Eb4893E164c935BfA561e7cd9",
        "topics": [
          "0x167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb5",
          "0x0000000000000000000000003027a0c4e35272c0707de2651a0638c3df1c37ac"
        ],
        "data": "0x",
        "logIndex": 206,
        "blockHash": "0x951eb1a2e24db8c79094fe0709d2e79661e98ad44ca0571ddd904ebbd889fe08"
      },
      {
        "transactionIndex": 39,
        "blockNumber": 22323444,
        "transactionHash": "0x9bc901725d374ba6352368c43a3a6de00cd85c80502bc8d9f7e9c9d9c3540a98",
        "address": "0xBDF2E24bCCaDDb4Eb4893E164c935BfA561e7cd9",
        "topics": [
          "0x878d105ed19c01e992a54459c2f04ba19432ac45600b42ce340d034272207436",
          "0x0000000000000000000000003027a0c4e35272c0707de2651a0638c3df1c37ac"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 207,
        "blockHash": "0x951eb1a2e24db8c79094fe0709d2e79661e98ad44ca0571ddd904ebbd889fe08"
      },
      {
        "transactionIndex": 39,
        "blockNumber": 22323444,
        "transactionHash": "0x9bc901725d374ba6352368c43a3a6de00cd85c80502bc8d9f7e9c9d9c3540a98",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000058b4b6951e9174f153635574076241315d7d3503",
          "0x0000000000000000000000007b5000af8ab69fd59eb0d4f5762bff57c9c04385"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000096a4bfc193dc00000000000000000000000000000000000000000000000000cf22e988dc79203000000000000000000000000000000000000000000000b20de6480acf3bc80992000000000000000000000000000000000000000000000000ce8c44c91ae5443000000000000000000000000000000000000000000000b20de6deaf8efd5be592",
        "logIndex": 208,
        "blockHash": "0x951eb1a2e24db8c79094fe0709d2e79661e98ad44ca0571ddd904ebbd889fe08"
      }
    ],
    "blockNumber": 22323444,
    "cumulativeGasUsed": "7758998",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3027a0c4E35272c0707dE2651A0638c3dF1c37AC",
    "0x3027a0c4E35272c0707dE2651A0638c3dF1c37AC",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619"
  ],
  "solcInputHash": "8e9275f97de8bada1ecb54b48507bc80",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlyOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTrusted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageProtection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"SetBridge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"name\":\"SetTrusted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bridges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minimumOuts\",\"type\":\"uint256[]\"}],\"name\":\"buyWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"doAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setAllowedBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isTrusted\",\"type\":\"bool\"}],\"name\":\"setTrusted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniV2[]\",\"name\":\"lpTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minimumOuts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"keepToken0\",\"type\":\"bool[]\"}],\"name\":\"unwindPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyWeth(address[],uint256[],uint256[])\":{\"details\":\"we buy Weth or a bridge token (which will be sold for eth on the next call).\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract for selling received tokens into weth. Deploy on secondary networks.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WethMaker.sol\":\"WethMaker\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nabstract contract Auth {\\n\\n    event SetOwner(address indexed owner);\\n    event SetTrusted(address indexed user, bool isTrusted);\\n\\n    address public owner;\\n\\n    mapping(address => bool) isTrusted;\\n\\n    error OnlyOwner();\\n    error OnlyTrusted();\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert OnlyOwner();\\n        _;\\n    }\\n\\n    modifier onlyTrusted() {\\n        if (!isTrusted[msg.sender]) revert OnlyTrusted();\\n        _;\\n    }\\n\\n    constructor(address _owner, address _trusted) {\\n        owner = _owner;\\n        isTrusted[_trusted] = true;\\n\\n        emit SetOwner(owner);\\n        emit SetTrusted(_trusted, true);\\n    }\\n\\n    function setOwner(address _owner) external onlyOwner {\\n        owner = _owner;\\n        emit SetOwner(owner);\\n    }\\n\\n    function setTrusted(address _user, bool _isTrusted) external onlyOwner {\\n        isTrusted[_user] = _isTrusted;\\n        emit SetTrusted(_user, _isTrusted);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6a5d7b5457b641f197d2a0b8efbe83cb223aed23a179c7437bf6d29c5c832c31\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Unwindooor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Auth.sol\\\";\\nimport \\\"./interfaces/IUniV2.sol\\\";\\n\\n/// @notice Contract for withdrawing LP positions.\\n/// @dev Calling unwindPairs() withdraws the LP position into one of the two tokens\\ncontract Unwindooor is Auth {\\n\\n    error SlippageProtection();\\n    error TransferFailed();\\n\\n    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n    constructor(address _owner, address _user) Auth(_owner, _user) {}\\n\\n    function unwindPairs(\\n        IUniV2[] calldata lpTokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata minimumOuts,\\n        bool[] calldata keepToken0\\n    ) external onlyTrusted {\\n        for (uint256 i = 0; i < lpTokens.length; i++) {\\n            if (_unwindPair(lpTokens[i], amounts[i], keepToken0[i]) < minimumOuts[i]) revert SlippageProtection();\\n        }\\n    }\\n\\n    function _unwindPair(\\n        IUniV2 pair,\\n        uint256 amount,\\n        bool keepToken0\\n    ) private returns (uint256 amountOut) {\\n\\n        pair.transfer(address(pair), amount);\\n        (uint256 amount0, uint256 amount1) = pair.burn(address(this));\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n\\n        if (keepToken0) {\\n            _safeTransfer(pair.token1(), address(pair), amount1);\\n            amountOut = _getAmountOut(amount1, uint256(reserve1), uint256(reserve0));\\n            pair.swap(amountOut, 0, address(this), \\\"\\\");\\n            amountOut += amount0;\\n        } else {\\n            _safeTransfer(pair.token0(), address(pair), amount0);\\n            amountOut = _getAmountOut(amount0, uint256(reserve0), uint256(reserve1));\\n            pair.swap(0, amountOut, address(this), \\\"\\\");\\n            amountOut += amount1;\\n        }\\n    }\\n\\n    function _getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        return numerator / denominator;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, to, value));\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) revert TransferFailed();\\n    }\\n\\n/* \\n    // helper functions\\n    \\n    function easySlippageCalc(\\n        IUniV2[] memory lpTokens,\\n        uint256 slippage,\\n        address[] memory preferTokens\\n    ) external view returns (uint256[] memory amounts, uint256[] memory minimumOuts, bool[] memory keepToken0) {\\n        for (uint256 i = 0; i < lpTokens.length; i++) {\\n\\n            IUniV2 pool = lpTokens[i];\\n            \\n            uint256 amount = pool.balanceOf(address(this));\\n            \\n            if (_included(preferTokens, pool.token0())) keepToken0[i] = true;\\n            \\n            amounts[i] = amount;\\n            \\n            minimumOuts[i] = _easySlippage(pool, amount, keepToken0[i]) * slippage / 1e3;\\n        }\\n    }\\n\\n    function _easySlippage(\\n        IUniV2 pool,\\n        uint256 amount,\\n        bool keepToken0\\n    ) private view returns (uint256 minimumOut) {\\n\\n        uint256 totalSupply = pool.totalSupply();\\n        (uint112 reserve0, uint112 reserve1,) = pool.getReserves();\\n        uint256 amount0 = reserve0 * amount / totalSupply;\\n        uint256 amount1 = reserve1 * amount / totalSupply;\\n\\n        reserve0 -= uint112(amount0);\\n        reserve1 -= uint112(amount1);\\n\\n        if (keepToken0) {\\n            minimumOut = amount0 + _getAmountOut(amount1, uint256(reserve1), uint256(reserve0));\\n        } else {\\n            minimumOut = amount1 + _getAmountOut(amount0, uint256(reserve0), uint256(reserve1));\\n        }\\n    }\\n\\n    function _included(address[] memory tokens, address token) internal pure returns (bool) {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == token) return true;\\n        }\\n        return false;\\n    }\\n */\\n}\\n\",\"keccak256\":\"0x91e3326847f62048507b4deb9d5347f2ab41030dee51947b9f95bcccfc1e0acb\",\"license\":\"GPL-3.0-or-later\"},\"contracts/WethMaker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./Unwindooor.sol\\\";\\nimport \\\"./interfaces/IUniV2Factory.sol\\\";\\n\\n/// @notice Contract for selling received tokens into weth. Deploy on secondary networks.\\ncontract WethMaker is Unwindooor {\\n\\n    event SetBridge(address indexed token, address bridge);\\n\\n    address public immutable weth;\\n    IUniV2Factory public immutable factory;\\n\\n    mapping(address => address) public bridges;\\n\\n    constructor(address _owner, address _user, address _factory, address _weth) Unwindooor(_owner, _user) {\\n        factory = IUniV2Factory(_factory);\\n        weth = _weth;\\n    }\\n\\n    function setAllowedBridge(address _token, address _bridge) external onlyOwner {\\n        bridges[_token] = _bridge;\\n        emit SetBridge(_token, _bridge);\\n    }\\n\\n    /// @dev we buy Weth or a bridge token (which will be sold for eth on the next call).\\n    function buyWeth(\\n        address[] calldata tokens,\\n        uint256[] calldata amountsIn,\\n        uint256[] calldata minimumOuts\\n    ) external onlyTrusted {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n\\n            address tokenIn = tokens[i];\\n            address outToken = bridges[tokenIn] == address(0) ? weth : bridges[tokenIn];\\n            if (_swap(tokenIn, outToken, amountsIn[i], address(this)) < minimumOuts[i]) revert SlippageProtection();\\n            \\n        }\\n    }\\n\\n    function _swap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address to\\n    ) internal returns (uint256 outAmount) {\\n        \\n        IUniV2 pair = IUniV2(factory.getPair(tokenIn, tokenOut));\\n        IERC20(tokenIn).transfer(address(pair), amountIn);\\n\\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n\\n        if (tokenIn < tokenOut) {\\n\\n            outAmount = _getAmountOut(amountIn, reserve0, reserve1);\\n            pair.swap(0, outAmount, to, \\\"\\\");\\n\\n        } else {\\n\\n            outAmount = _getAmountOut(amountIn, reserve1, reserve0);\\n            pair.swap(outAmount, 0, to, \\\"\\\");\\n\\n        }\\n\\n    }\\n\\n    // Alow owner to withdraw the funds and bridge them to mainnet.\\n    function doAction(address _to, uint256 _value, bytes memory _data) onlyOwner virtual external {\\n        (bool success, ) = _to.call{value: _value}(_data);\\n        require(success);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2c48c3281233924cfc9507fb33d050d3364854eb7864a2cf08bea84e622696ef\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\ninterface IERC20 {\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function balanceOf(address addy) external view returns (uint256);\\n}\",\"keccak256\":\"0x2f287c50356328f67ae0860045e18da10557296548c083cd90e6145cdc9e2f8b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IUniV2 is IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n}\",\"keccak256\":\"0xba877faa323b59d44420f92f2a239e63f509d0eb4487f1f8c5814ae31dc5bce3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IUniV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\ninterface IUniV2Factory {\\n    function getPair(address tokenA, address tokenB) external view returns (address);\\n}\",\"keccak256\":\"0x9391904c1c33483d2f73bedc82be95d88375dccfc695a7ec6dcd8f975a97b7de\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620019753803806200197583398101604081905262000034916200011d565b600080546001600160a01b0319166001600160a01b038681169190911782558481168252600160208190526040808420805460ff19169092179091558254905187938793859385939116917f167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb591a2604051600181526001600160a01b038216907f878d105ed19c01e992a54459c2f04ba19432ac45600b42ce340d0342722074369060200160405180910390a25050506001600160a01b0392831660a0525016608052506200017a9050565b80516001600160a01b03811681146200011857600080fd5b919050565b600080600080608085870312156200013457600080fd5b6200013f8562000100565b93506200014f6020860162000100565b92506200015f6040860162000100565b91506200016f6060860162000100565b905092959194509250565b60805160a0516117c8620001ad600039600081816101860152610cb901526000818160dd015261059f01526117c86000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80639dd8a81c11610076578063ced67f0c1161005b578063ced67f0c146101a8578063dd5b8063146101de578063f32a12ac146101f157600080fd5b80639dd8a81c1461016e578063c45a01551461018157600080fd5b806354a0af17116100a757806354a0af17146101285780635aa794591461013b5780638da5cb5b1461014e57600080fd5b806313af4035146100c35780633fc8cef3146100d8575b600080fd5b6100d66100d13660046111e5565b610204565b005b6100ff7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100d6610136366004611238565b6102c2565b6100d661014936600461136f565b610391565b6000546100ff9073ffffffffffffffffffffffffffffffffffffffff1681565b6100d661017c366004611433565b6104c2565b6100ff7f000000000000000000000000000000000000000000000000000000000000000081565b6100ff6101b63660046111e5565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6100d66101ec3660046114cd565b610654565b6100d66101ff366004611514565b610732565b60005473ffffffffffffffffffffffffffffffffffffffff163314610255576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f167d3e9c1016ab80e58802ca9da10ce5c6a0f4debc46a2e7a2cd9e56899a4fb591a250565b60005473ffffffffffffffffffffffffffffffffffffffff163314610313576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff16838360405161033b9190611542565b60006040518083038185875af1925050503d8060008114610378576040519150601f19603f3d011682016040523d82523d6000602084013e61037d565b606091505b505090508061038b57600080fd5b50505050565b3360009081526001602052604090205460ff166103da576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b878110156104b7578484828181106103f7576103f761157d565b9050602002013561046d8a8a848181106104135761041361157d565b905060200201602081019061042891906111e5565b89898581811061043a5761043a61157d565b905060200201358686868181106104535761045361157d565b905060200201602081019061046891906115ac565b610806565b10156104a5576040517f17d431f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806104af816115f8565b9150506103dd565b505050505050505050565b3360009081526001602052604090205460ff1661050b576040517fcf1119ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8581101561064b57600087878381811061052a5761052a61157d565b905060200201602081019061053f91906111e5565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526002602052604081205492935091161561059d5773ffffffffffffffffffffffffffffffffffffffff808316600090815260026020526040902054166105bf565b7f00000000000000000000000000000000000000000000000000000000000000005b90508484848181106105d3576105d361157d565b905060200201356105fe83838a8a888181106105f1576105f161157d565b9050602002013530610c67565b1015610636576040517f17d431f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50508080610643906115f8565b91505061050e565b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146106a5576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82811660008181526002602090815260409182902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055905192835290917f8357797ab855a0bad5103ea8bd2f21f986350e94d73f143ae114db8f0db5a93a91015b60405180910390a25050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610783576040517f5fc483c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527f878d105ed19c01e992a54459c2f04ba19432ac45600b42ce340d0342722074369101610726565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482018190526024820184905260009163a9059cbb906044016020604051808303816000875af115801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190611631565b506040517f89afcb44000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8716906389afcb449060240160408051808303816000875af1158015610911573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610935919061164e565b915091506000808773ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab9190611695565b50915091508515610b0b57610a2f8873ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2891906116e5565b8985610ffc565b610a5a83826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16611171565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526004810182905260006024820181905230604483015260806064830152608482015290955073ffffffffffffffffffffffffffffffffffffffff89169063022c0d9f9060a401600060405180830381600087803b158015610ae057600080fd5b505af1158015610af4573d6000803e3d6000fd5b505050508385610b049190611702565b9450610c5c565b610b848873ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7d91906116e5565b8986610ffc565b610baf84836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16611171565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526000600482018190526024820183905230604483015260806064830152608482015290955073ffffffffffffffffffffffffffffffffffffffff89169063022c0d9f9060a401600060405180830381600087803b158015610c3557600080fd5b505af1158015610c49573d6000803e3d6000fd5b505050508285610c599190611702565b94505b505050509392505050565b6040517fe6a4390500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152848116602483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590604401602060405180830381865afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2491906116e5565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152602482018790529192509087169063a9059cbb906044016020604051808303816000875af1158015610d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc19190611631565b506000808273ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e349190611695565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161015610f4157610e98868383611171565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526000600482018190526024820183905273ffffffffffffffffffffffffffffffffffffffff88811660448401526080606484015260848301919091529195509084169063022c0d9f9060a401600060405180830381600087803b158015610f2457600080fd5b505af1158015610f38573d6000803e3d6000fd5b50505050610ff1565b610f4c868284611171565b6040517f022c0d9f0000000000000000000000000000000000000000000000000000000081526004810182905260006024820181905273ffffffffffffffffffffffffffffffffffffffff88811660448401526080606484015260848301919091529195509084169063022c0d9f9060a401600060405180830381600087803b158015610fd857600080fd5b505af1158015610fec573d6000803e3d6000fd5b505050505b505050949350505050565b604080518082018252601981527f7472616e7366657228616464726573732c75696e743235362900000000000000602091820152815173ffffffffffffffffffffffffffffffffffffffff85811660248301526044808301869052845180840390910181526064909201845291810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052915160009283928716916110c39190611542565b6000604051808303816000865af19150503d8060008114611100576040519150601f19603f3d011682016040523d82523d6000602084013e611105565b606091505b509150915081158061113357508051158015906111335750808060200190518101906111319190611631565b155b1561116a576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b600080611180856103e561171a565b9050600061118e848361171a565b905060008261119f876103e861171a565b6111a99190611702565b90506111b58183611757565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146111e257600080fd5b50565b6000602082840312156111f757600080fd5b8135611202816111c0565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561124d57600080fd5b8335611258816111c0565b925060208401359150604084013567ffffffffffffffff8082111561127c57600080fd5b818601915086601f83011261129057600080fd5b8135818111156112a2576112a2611209565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156112e8576112e8611209565b8160405282815289602084870101111561130157600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008083601f84011261133557600080fd5b50813567ffffffffffffffff81111561134d57600080fd5b6020830191508360208260051b850101111561136857600080fd5b9250929050565b6000806000806000806000806080898b03121561138b57600080fd5b883567ffffffffffffffff808211156113a357600080fd5b6113af8c838d01611323565b909a50985060208b01359150808211156113c857600080fd5b6113d48c838d01611323565b909850965060408b01359150808211156113ed57600080fd5b6113f98c838d01611323565b909650945060608b013591508082111561141257600080fd5b5061141f8b828c01611323565b999c989b5096995094979396929594505050565b6000806000806000806060878903121561144c57600080fd5b863567ffffffffffffffff8082111561146457600080fd5b6114708a838b01611323565b9098509650602089013591508082111561148957600080fd5b6114958a838b01611323565b909650945060408901359150808211156114ae57600080fd5b506114bb89828a01611323565b979a9699509497509295939492505050565b600080604083850312156114e057600080fd5b82356114eb816111c0565b915060208301356114fb816111c0565b809150509250929050565b80151581146111e257600080fd5b6000806040838503121561152757600080fd5b8235611532816111c0565b915060208301356114fb81611506565b6000825160005b818110156115635760208186018101518583015201611549565b81811115611572576000828501525b509190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156115be57600080fd5b813561120281611506565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561162a5761162a6115c9565b5060010190565b60006020828403121561164357600080fd5b815161120281611506565b6000806040838503121561166157600080fd5b505080516020909101519092909150565b80516dffffffffffffffffffffffffffff8116811461169057600080fd5b919050565b6000806000606084860312156116aa57600080fd5b6116b384611672565b92506116c160208501611672565b9150604084015163ffffffff811681146116da57600080fd5b809150509250925092565b6000602082840312156116f757600080fd5b8151611202816111c0565b60008219821115611715576117156115c9565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611752576117526115c9565b500290565b60008261178d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122002003039b8ffe3391dc3ad8c8107d09731ccb3f66e3acc3d9f4f41c006e59c3b64736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyWeth(address[],uint256[],uint256[])": {
        "details": "we buy Weth or a bridge token (which will be sold for eth on the next call)."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contract for selling received tokens into weth. Deploy on secondary networks.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13,
        "contract": "contracts/WethMaker.sol:WethMaker",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17,
        "contract": "contracts/WethMaker.sol:WethMaker",
        "label": "isTrusted",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 562,
        "contract": "contracts/WethMaker.sol:WethMaker",
        "label": "bridges",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}